

@startuml

interface IPersistFile {
  filepath: string;
  marks: number[];
}

interface IPersistTask {
  name: string;
  files: IPersistFile[];
}

interface IPersistTasks {
  activeTaskName: string;
  tasks: IPersistTask[];
}


class TaskManager {
    -{static}_instance: TaskManager
    +{static}get instance(): TaskManager
    -constructor()
 -_activeTask: Task
 -_allTasks: Task[]
 -_statusBarItem: vscode.StatusBarItem

 +activeTask(): Task
 +get allTasks(): Task[]
 +taskNames(): string[]
 +setActiveTask(taskname: string): void
 +addTask(task: IPersistTask): void
 +useActiveTask(taskname = 'default'): Task
 +delete(taskname: string): Task
 +nextMark(activeFile: string, currentline: number): void
 +previousMark(activeFile: string, currentline: number): void
 +nextDocument(): void
 +previousDocument(): void
}

class Task {
 -_name: string
 -_activeFile: File | undefined
 -_files: Ring<File>

 +get name()
 +get activeFileFilePath(): string | undefined
 +get activeFile(): File | undefined
 +set activeFile(file: File | undefined)
 +get files(): Ring<File>
 +get allMarks(): Mark[] 

 +mergeWith(taskToMerge: IPersistTask): Task
 +toggle(path: string, lineNumber: number): boolean
 +use(path: string): File
 +getFile(reducedFilePath: string): File | undefined
}

abstract class Helper{
    -{static}_activeEditorLineCount: number
    -{static}_activeEditor: vscode.TextEditor | undefined
    -{static}_taskManager: TaskManager
    +{static}init(context: vscode.ExtensionContext): void
    +{static}get activeEditor() : vscode.TextEditor | undefined
    +{static}deleteTask(): void
    +{static}persistActiveFile(): void
    +{static}changeActiveFile(editor: vscode.TextEditor | undefined): void
    +{static}refresh(): void
    +{static}async toggleMark(): Promise<void>
    +{static}async selectMarkFromList(): Promise<void>
    +{static}async selectTask(): Promise<void>
    +{static}async createTask(): Promise<void>
    +{static}async nextMark(): Promise<void>
    +{static}async previousMark(): Promise<void>
    -{static}handleEditorChange(): void
    -{static}handleChange(context: vscode.ExtensionContext): void
    -{static}handleSave(): void
}

abstract class PathHelper{
    -{static}_basePath: string
    +{static}get basePath(): string
    +{static}set basePath(basePath: string)
    +{static}getFullPath(filepath: string | undefined): string | undefined
    +{static}reducePath(filepath: string): string
}

abstract class Persist{
    -{static}_taskManager: TaskManager;
    -{static}_tasksDataFilePath: string;
    -{static}_pathType: PathType;
    +{static}initAndLoad(taskManager: TaskManager): void
    +{static}saveTasks(): void
    +{static}get taskmarksDataFilePath(): string
    +{static}taskToPersistTask(task: Task): IPersistTask
}

abstract class WriteFile{
    -{static}_filePath: string
    -{static}_stream: WriteStream
    +{static}init(filePath: string, clear = true): void
    +{static}enabled(): boolean
    +{static}saveLine(line: string): void
}

abstract class DecoratorHelper{
    -{static}_iconPath: string
    -{static}_vscTextEditorDecorationType: vscode.TextEditorDecorationType
    +{static}initDecorator(context: vscode.ExtensionContext): void
    +{static}get iconPath(): string
    +{static}refresh(activeEditor: vscode.TextEditor, marks: number[]): void
    +{static}showLine(line: number): void
    +{static}openAndShow(filepath: string, mark: number): void
}

class Ring<extends Array<T>> {
    -_current = -1

    +get current(): T | undefined
    +get next(): T | undefined
    +get previous(): T | undefined
    +get top(): T | undefined
    +get bottom(): T | undefined
    
    -checkPosition(): void

    +insertBefore(item: T): T | undefined
    +insertAfter(item: T): T | undefined
    +pushArray(items: T[]): number
    +push(item: T): number
    +deleteCurrent(): T | undefined


}

class File {
 -_filepath: string
 -_marks: Mark[]

 +get filepath
 +get allMarks
 +get lineNumbers

 +mergeWith(file: IPersistFile): File
 +setMarksFromPersist(lineNumbers: number[]): void
 +addMark(lineNumber: number): void
 +toggleTaskMark(lineNumber: number): void
 +unDirtyAll(): void
 +hasMarks(): boolean
}

class Mark {
 -_isDirty: boolean
 -_parent: File
 -_label = ''
 -_lineNumber: number
 -_quickPickItem: vscode.QuickPickItem | undefined

 +get quickPickItem(): vscode.QuickPickItem | undefined
 +get lineNumberForPersist(): number | undefined
 +get lineNumber(): number
 +set lineNumber(lineNumber: number)

 +unDirty(): void
 +async getQuickPickItem(filepath: string,
    lineNumber: number | null): Promise<vscode.QuickPickItem>
}

TaskManager "1" -- "0..*" Task
Task "1" -- "0..*" File
File "1" -- "0..*" Mark

@enduml